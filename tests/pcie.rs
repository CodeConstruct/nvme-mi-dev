// SPDX-License-Identifier: GPL-3.0-only
/*
 * Copyright (c) 2025 Code Construct
 */
mod common;

use common::setup;
use mctp::MsgIC;

use crate::common::{DeviceType, ExpectedRespChannel, new_device};

#[rustfmt::skip]
pub const RESP_INVALID_COMMAND_SIZE: [u8; 11] = [
    0xa0, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00,
    0x81, 0xb0, 0x66, 0xf7
];

#[rustfmt::skip]
pub const RESP_INVALID_COMMAND_INPUT_DATA_SIZE: [u8; 11] = [
    0xa0, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00,
    0xb8, 0x39, 0x44, 0x95
];

#[rustfmt::skip]
pub const RESP_ACCESS_DENIED: [u8; 11] = [
    0xa0, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00,
    0x00, 0x93, 0x01, 0x48
];

#[test]
fn configuration_read_short() {
    setup();

    let (mut mep, mut subsys) = new_device(DeviceType::P1p1tC1iN0a0a);

    #[rustfmt::skip]
    const REQ: [u8; 19] = [
        0x20, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,

        // PCIe Request DWORD 0
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        // Missing PCIe Request DWORD 2

        // MIC
        0x95, 0xbf, 0x48, 0xfc
    ];

    let resp = ExpectedRespChannel::new(&RESP_INVALID_COMMAND_SIZE);
    smol::block_on(async {
        mep.handle_async(&mut subsys, &REQ, MsgIC(true), resp, async |_| Ok(()))
            .await
    })
}

#[test]
fn configuration_read_long() {
    setup();

    let (mut mep, mut subsys) = new_device(DeviceType::P1p1tC1iN0a0a);

    #[rustfmt::skip]
    const REQ: [u8; 27] = [
        0x20, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,

        // PCIe Request DWORD 0
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,

        // Unexpected request data
        0x00, 0x00, 0x00, 0x00,

        // MIC
        0x86, 0x75, 0x81, 0xd5
    ];

    let resp = ExpectedRespChannel::new(&RESP_INVALID_COMMAND_SIZE);
    smol::block_on(async {
        mep.handle_async(&mut subsys, &REQ, MsgIC(true), resp, async |_| Ok(()))
            .await
    })
}

#[test]
fn configuration_read() {
    setup();

    let (mut mep, mut subsys) = new_device(DeviceType::P1p1tC1iN0a0a);

    #[rustfmt::skip]
    const REQ: [u8; 23] = [
        0x20, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,

        // PCIe Request DWORD 0
        0x00, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,

        // MIC
        0x8f, 0x1b, 0x1a, 0x82
    ];

    #[rustfmt::skip]
    const PCI_CONFIG: [u8; 132] = [
        0xff, 0xff, 0xff, 0xff,
        0x00, 0x00, 0x10, 0x00,
        0x00, 0x03, 0x08, 0x01,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0xff, 0xff, 0xff, 0xff,
        0x00, 0x00, 0x00, 0x00,
        0x40, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x01, 0x48, 0x13, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x10, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];

    const RESP_LEN: usize = 4107;
    let mut resp = [0; RESP_LEN];
    resp[0] = 0xa0;
    resp[7..139].copy_from_slice(&PCI_CONFIG);
    resp[{ RESP_LEN - 4 }..].copy_from_slice(&[0xab, 0x72, 0xdb, 0xa3]);

    let resp = ExpectedRespChannel::new(&resp);
    smol::block_on(async {
        mep.handle_async(&mut subsys, &REQ, MsgIC(true), resp, async |_| Ok(()))
            .await
    })
}

#[test]
fn configuration_write_invalid_short() {
    setup();

    let (mut mep, mut subsys) = new_device(DeviceType::P1p1tC1iN0a0a);

    #[rustfmt::skip]
    const REQ: [u8; 23] = [
        0x20, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00,

        // PCIe Request DWORD 0
        0x04, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,

        // No request Data

        // MIC
        0xb5, 0x79, 0x5c, 0xc9
    ];

    let resp = ExpectedRespChannel::new(&RESP_INVALID_COMMAND_INPUT_DATA_SIZE);
    smol::block_on(async {
        mep.handle_async(&mut subsys, &REQ, MsgIC(true), resp, async |_| Ok(()))
            .await
    })
}

#[test]
fn configuration_write_invalid_long() {
    setup();

    let (mut mep, mut subsys) = new_device(DeviceType::P1p1tC1iN0a0a);

    #[rustfmt::skip]
    const REQ: [u8; 31] = [
        0x20, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00,

        // PCIe Request DWORD 0
        0x04, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,

        // Request Data
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,

        // MIC
        0x01, 0x87, 0x99, 0x1c
    ];

    let resp = ExpectedRespChannel::new(&RESP_INVALID_COMMAND_INPUT_DATA_SIZE);
    smol::block_on(async {
        mep.handle_async(&mut subsys, &REQ, MsgIC(true), resp, async |_| Ok(()))
            .await
    })
}

#[test]
fn configuration_write() {
    setup();

    let (mut mep, mut subsys) = new_device(DeviceType::P1p1tC1iN0a0a);

    #[rustfmt::skip]
    const REQ: [u8; 27] = [
        0x20, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00,

        // PCIe Request DWORD 0
        0x04, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,

        // Request Data
        0x00, 0x00, 0x00, 0x00,

        // MIC
        0x10, 0x7e, 0x01, 0xe1
    ];

    let resp = ExpectedRespChannel::new(&RESP_ACCESS_DENIED);
    smol::block_on(async {
        mep.handle_async(&mut subsys, &REQ, MsgIC(true), resp, async |_| Ok(()))
            .await
    })
}
